{"version":3,"file":"static/chunks/246.90d1dddb17d68b09.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@swc/helpers/esm/_tagged_template_literal.js","webpack://_N_E/./node_modules/framer-motion/dist/es/value/use-motion-value.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/use-animation-frame.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/utils/transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/use-combine-values.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/use-computed.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/use-transform.mjs","webpack://_N_E/./node_modules/framer-motion/dist/es/value/use-motion-template.mjs","webpack://_N_E/./components/ui/MovingBorders.tsx","webpack://_N_E/./components/Experience.tsx","webpack://_N_E/<anon>"],"sourcesContent":["export function _tagged_template_literal(strings, raw) {\n    if (!raw) raw = strings.slice(0);\n\n    return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));\n}\nexport { _tagged_template_literal as _ };\n","import { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = useState(initial);\n        useEffect(() => value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n","import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nfunction useAnimationFrame(callback) {\n    const initialTimestamp = useRef(0);\n    const { isStatic } = useContext(MotionConfigContext);\n    useEffect(() => {\n        if (isStatic)\n            return;\n        const provideTimeSinceStart = ({ timestamp, delta }) => {\n            if (!initialTimestamp.current)\n                initialTimestamp.current = timestamp;\n            callback(timestamp - initialTimestamp.current, delta);\n        };\n        frame.update(provideTimeSinceStart, true);\n        return () => cancelFrame(provideTimeSinceStart);\n    }, [callback]);\n}\n\nexport { useAnimationFrame };\n","import { interpolate } from './interpolate.mjs';\n\nconst isCustomValueType = (v) => {\n    return v && typeof v === \"object\" && v.mix;\n};\nconst getMixer = (v) => (isCustomValueType(v) ? v.mix : undefined);\nfunction transform(...args) {\n    const useImmediate = !Array.isArray(args[0]);\n    const argOffset = useImmediate ? 0 : -1;\n    const inputValue = args[0 + argOffset];\n    const inputRange = args[1 + argOffset];\n    const outputRange = args[2 + argOffset];\n    const options = args[3 + argOffset];\n    const interpolator = interpolate(inputRange, outputRange, {\n        mixer: getMixer(outputRange[0]),\n        ...options,\n    });\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\nexport { transform };\n","import { useMotionValue } from './use-motion-value.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { cancelFrame, frame } from '../frameloop/frame.mjs';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    const updateValue = () => value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useIsomorphicLayoutEffect(() => {\n        const scheduleUpdate = () => frame.preRender(updateValue, false, true);\n        const subscriptions = values.map((v) => v.on(\"change\", scheduleUpdate));\n        return () => {\n            subscriptions.forEach((unsubscribe) => unsubscribe());\n            cancelFrame(updateValue);\n        };\n    });\n    return value;\n}\n\nexport { useCombineMotionValues };\n","import { collectMotionValues } from './index.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\n\nfunction useComputed(compute) {\n    /**\n     * Open session of collectMotionValues. Any MotionValue that calls get()\n     * will be saved into this array.\n     */\n    collectMotionValues.current = [];\n    compute();\n    const value = useCombineMotionValues(collectMotionValues.current, compute);\n    /**\n     * Synchronously close session of collectMotionValues.\n     */\n    collectMotionValues.current = undefined;\n    return value;\n}\n\nexport { useComputed };\n","import { transform } from '../utils/transform.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\nimport { useComputed } from './use-computed.mjs';\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    if (typeof input === \"function\") {\n        return useComputed(input);\n    }\n    const transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], ([latest]) => transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n    const latest = useConstant(() => []);\n    return useCombineMotionValues(values, () => {\n        latest.length = 0;\n        const numValues = values.length;\n        for (let i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nexport { useTransform };\n","import { useCombineMotionValues } from './use-combine-values.mjs';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\n\n/**\n * Combine multiple motion values into a new one using a string template literal.\n *\n * ```jsx\n * import {\n *   motion,\n *   useSpring,\n *   useMotionValue,\n *   useMotionTemplate\n * } from \"framer-motion\"\n *\n * function Component() {\n *   const shadowX = useSpring(0)\n *   const shadowY = useMotionValue(0)\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\n *\n *   return <motion.div style={{ filter: shadow }} />\n * }\n * ```\n *\n * @public\n */\nfunction useMotionTemplate(fragments, ...values) {\n    /**\n     * Create a function that will build a string from the latest motion values.\n     */\n    const numFragments = fragments.length;\n    function buildValue() {\n        let output = ``;\n        for (let i = 0; i < numFragments; i++) {\n            output += fragments[i];\n            const value = values[i];\n            if (value) {\n                output += isMotionValue(value) ? value.get() : value;\n            }\n        }\n        return output;\n    }\n    return useCombineMotionValues(values.filter(isMotionValue), buildValue);\n}\n\nexport { useMotionTemplate };\n","\"use client\";\r\nimport React from \"react\";\r\nimport {\r\n  motion,\r\n  useAnimationFrame,\r\n  useMotionTemplate,\r\n  useMotionValue,\r\n  useTransform,\r\n} from \"framer-motion\";\r\nimport { useRef } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport function Button({\r\n  borderRadius = \"1.75rem\",\r\n  children,\r\n  as: Component = \"button\",\r\n  containerClassName,\r\n  borderClassName,\r\n  duration,\r\n  className,\r\n  ...otherProps\r\n}: {\r\n  borderRadius?: string;\r\n  children: React.ReactNode;\r\n  as?: any;\r\n  containerClassName?: string;\r\n  borderClassName?: string;\r\n  duration?: number;\r\n  className?: string;\r\n  [key: string]: any;\r\n}) {\r\n  return (\r\n    <Component\r\n      className={cn(\r\n        // remove h-16 w-40, add  md:col-span-2\r\n        \"bg-transparent relative text-xl p-[1px] overflow-hidden md:col-span-2 md:row-span-1\",\r\n        containerClassName\r\n      )}\r\n      style={{\r\n        borderRadius: borderRadius,\r\n      }}\r\n      {...otherProps}\r\n    >\r\n      <div\r\n        className=\"absolute inset-0 rounde-[1.75rem]\"\r\n        style={{ borderRadius: `calc(${borderRadius} * 0.96)` }}\r\n      >\r\n        <MovingBorder duration={duration} rx=\"30%\" ry=\"30%\">\r\n          <div\r\n            className={cn(\r\n              \"h-20 w-20 opacity-[0.8] bg-[radial-gradient(#CBACF9_40%,transparent_60%)]\",\r\n              borderClassName\r\n            )}\r\n          />\r\n        </MovingBorder>\r\n      </div>\r\n\r\n      <div\r\n        className={cn(\r\n          \"relative bg-slate-900/[0.] border border-slate-800 backdrop-blur-xl text-white flex items-center justify-center w-full h-full text-sm antialiased\",\r\n          className\r\n        )}\r\n        style={{\r\n          borderRadius: `calc(${borderRadius} * 0.96)`,\r\n        }}\r\n      >\r\n        {children}\r\n      </div>\r\n    </Component>\r\n  );\r\n}\r\n\r\nexport const MovingBorder = ({\r\n  children,\r\n  duration = 2000,\r\n  rx,\r\n  ry,\r\n  ...otherProps\r\n}: {\r\n  children: React.ReactNode;\r\n  duration?: number;\r\n  rx?: string;\r\n  ry?: string;\r\n  [key: string]: any;\r\n}) => {\r\n  const pathRef = useRef<any>();\r\n  const progress = useMotionValue<number>(0);\r\n\r\n  useAnimationFrame((time) => {\r\n    const length = pathRef.current?.getTotalLength();\r\n    if (length) {\r\n      const pxPerMillisecond = length / duration;\r\n      progress.set((time * pxPerMillisecond) % length);\r\n    }\r\n  });\r\n\r\n  const x = useTransform(\r\n    progress,\r\n    (val) => pathRef.current?.getPointAtLength(val).x\r\n  );\r\n  const y = useTransform(\r\n    progress,\r\n    (val) => pathRef.current?.getPointAtLength(val).y\r\n  );\r\n\r\n  const transform = useMotionTemplate`translateX(${x}px) translateY(${y}px) translateX(-50%) translateY(-50%)`;\r\n\r\n  return (\r\n    <>\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        preserveAspectRatio=\"none\"\r\n        className=\"absolute h-full w-full\"\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        {...otherProps}\r\n      >\r\n        <rect\r\n          fill=\"none\"\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          rx={rx}\r\n          ry={ry}\r\n          ref={pathRef}\r\n        />\r\n      </svg>\r\n      <motion.div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: 0,\r\n          left: 0,\r\n          display: \"inline-block\",\r\n          transform,\r\n        }}\r\n      >\r\n        {children}\r\n      </motion.div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { workExperience } from \"@/data\";\r\nimport { Button } from \"./ui/MovingBorders\";\r\nimport Image from \"next/image\";\r\n\r\nconst Experience = () => {\r\n  return (\r\n    <div className=\"py-20 w-full\">\r\n      <h1 className=\"heading\">\r\n        My <span className=\"text-purple\">work experience</span>\r\n      </h1>\r\n\r\n      <div className=\"w-full mt-12 grid lg:grid-cols-4 grid-cols-1 gap-10\">\r\n        {workExperience.map((card) => (\r\n          <Button\r\n            key={card.id}\r\n            //   random duration will be fun , I think , may be not\r\n            duration={Math.floor(Math.random() * 10000) + 10000}\r\n            borderRadius=\"1.75rem\"\r\n            style={{\r\n              //   add these two\r\n              //   you can generate the color from here https://cssgradient.io/\r\n              background: \"rgb(4,7,29)\",\r\n              backgroundColor:\r\n                \"linear-gradient(90deg, rgba(4,7,29,1) 0%, rgba(12,14,35,1) 100%)\",\r\n              // add this border radius to make it more rounded so that the moving border is more realistic\r\n              borderRadius: `calc(1.75rem* 0.96)`,\r\n            }}\r\n            // remove bg-white dark:bg-slate-900\r\n            className=\"flex-1 text-black dark:text-white border-neutral-200 dark:border-slate-800\"\r\n          >\r\n            <div className=\"flex lg:flex-row flex-col lg:items-center p-3 py-6 md:p-5 lg:p-10 gap-2\">\r\n              <Image\r\n                src={card.thumbnail}\r\n                alt={card.thumbnail}\r\n                className=\"lg:w-32 md:w-20 w-16\"\r\n              />\r\n              <div className=\"lg:ms-5\">\r\n                <h1 className=\"text-start text-xl md:text-2xl font-bold\">\r\n                  {card.title}\r\n                </h1>\r\n                <p className=\"text-start text-white-100 mt-3 font-semibold\">\r\n                  {card.desc}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </Button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Experience;\r\n"],"names":["useMotionValue","initial","value","use_constant","h","es_value","BX","isStatic","react","useContext","MotionConfigContext","_","setLatest","useState","useEffect","on","isCustomValueType","v","mix","getMixer","undefined","useCombineMotionValues","values","combineValues","updateValue","set","use_isomorphic_effect","L","scheduleUpdate","frameloop_frame","Wi","preRender","subscriptions","map","forEach","unsubscribe","Pn","useTransform","input","inputRangeOrTransformer","outputRange","options","useComputed","compute","S1","current","transformer","transform","args","useImmediate","Array","isArray","argOffset","inputValue","inputRange","interpolator","interpolate","s","mixer","useListTransform","latest","length","numValues","i","get","strings","raw","slice","Object","freeze","defineProperties","Button","param","borderRadius","children","as","Component","containerClassName","borderClassName","duration","className","otherProps","jsx_runtime","jsxs","cn","style","jsx","div","concat","MovingBorder","rx","ry","pathRef","useRef","progress","useAnimationFrame","callback","initialTimestamp","provideTimeSinceStart","timestamp","delta","update","getTotalLength","time","x","getPointAtLength","val","y","useMotionTemplate","fragments","numFragments","filter","is_motion_value","output","Fragment","svg","xmlns","preserveAspectRatio","width","height","rect","fill","ref","motion","position","top","left","display","components_Experience","h1","span","workExperience","Math","floor","random","background","backgroundColor","Image","src","card","thumbnail","alt","title","p","desc","id"],"sourceRoot":""}